//
// Generated file, do not edit! Created by nedtool 5.6 from veins/modules/application/traci/modified/CongestionInfoMessage.msg.
//

#ifndef __VEINS_CONGESTIONINFOMESSAGE_M_H
#define __VEINS_CONGESTIONINFOMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif

// cplusplus {{
#include "veins/base/utils/Coord.h"
#include "veins/modules/messages/BaseFrame1609_4_m.h"
#include "veins/base/utils/SimpleAddress.h"
// }}


namespace veins {

/**
 * Class generated from <tt>veins/modules/application/traci/modified/CongestionInfoMessage.msg:35</tt> by nedtool.
 * <pre>
 * packet CongestionInfoMessage extends BaseFrame1609_4
 * {
 *     simtime_t timestamp;                      // timestamp
 *     string edgeID;                            // edgeID
 *     LAddress::L2Type senderAddress = -1;      // carID
 *     double averageSpeed = 0;                  // avg speed of all cars
 *     int serial = 0;							  // serial
 * }
 * </pre>
 */
class VEINS_API CongestionInfoMessage : public ::veins::BaseFrame1609_4
{
  protected:
    ::omnetpp::simtime_t timestamp;
    ::omnetpp::opp_string edgeID;
    LAddress::L2Type senderAddress;
    double averageSpeed;
    int serial;

  private:
    void copy(const CongestionInfoMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CongestionInfoMessage&);

  public:
    CongestionInfoMessage(const char *name=nullptr, short kind=0);
    CongestionInfoMessage(const CongestionInfoMessage& other);
    virtual ~CongestionInfoMessage();
    CongestionInfoMessage& operator=(const CongestionInfoMessage& other);
    virtual CongestionInfoMessage *dup() const override {return new CongestionInfoMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual ::omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(::omnetpp::simtime_t timestamp);
    virtual const char * getEdgeID() const;
    virtual void setEdgeID(const char * edgeID);
    virtual LAddress::L2Type& getSenderAddress();
    virtual const LAddress::L2Type& getSenderAddress() const {return const_cast<CongestionInfoMessage*>(this)->getSenderAddress();}
    virtual void setSenderAddress(const LAddress::L2Type& senderAddress);
    virtual double getAverageSpeed() const;
    virtual void setAverageSpeed(double averageSpeed);
    virtual int getSerial() const;
    virtual void setSerial(int serial);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CongestionInfoMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CongestionInfoMessage& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_CONGESTIONINFOMESSAGE_M_H

