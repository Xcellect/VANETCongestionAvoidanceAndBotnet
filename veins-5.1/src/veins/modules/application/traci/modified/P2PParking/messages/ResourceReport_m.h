//
// Generated file, do not edit! Created by nedtool 5.6 from veins/modules/application/traci/modified/P2PParking/messages/ResourceReport.msg.
//

#ifndef __VEINS_RESOURCEREPORT_M_H
#define __VEINS_RESOURCEREPORT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif

// cplusplus {{
#include "veins/modules/messages/BaseFrame1609_4_m.h"
#include "../model/AtomicInformation.h"
#include "../model/AggregateInformation.h"
// }}


namespace veins {

/**
 * Class generated from <tt>veins/modules/application/traci/modified/P2PParking/messages/ResourceReport.msg:28</tt> by nedtool.
 * <pre>
 * packet ResourceReport extends BaseFrame1609_4
 * {
 *     AtomicInformation atomics[];
 *     AggregateInformation aggregates[];
 * }
 * </pre>
 */
class VEINS_API ResourceReport : public ::veins::BaseFrame1609_4
{
  protected:
    AtomicInformation *atomics; // array ptr
    unsigned int atomics_arraysize;
    AggregateInformation *aggregates; // array ptr
    unsigned int aggregates_arraysize;

  private:
    void copy(const ResourceReport& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ResourceReport&);

  public:
    ResourceReport(const char *name=nullptr, short kind=0);
    ResourceReport(const ResourceReport& other);
    virtual ~ResourceReport();
    ResourceReport& operator=(const ResourceReport& other);
    virtual ResourceReport *dup() const override {return new ResourceReport(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setAtomicsArraySize(unsigned int size);
    virtual unsigned int getAtomicsArraySize() const;
    virtual AtomicInformation& getAtomics(unsigned int k);
    virtual const AtomicInformation& getAtomics(unsigned int k) const {return const_cast<ResourceReport*>(this)->getAtomics(k);}
    virtual void setAtomics(unsigned int k, const AtomicInformation& atomics);
    virtual void setAggregatesArraySize(unsigned int size);
    virtual unsigned int getAggregatesArraySize() const;
    virtual AggregateInformation& getAggregates(unsigned int k);
    virtual const AggregateInformation& getAggregates(unsigned int k) const {return const_cast<ResourceReport*>(this)->getAggregates(k);}
    virtual void setAggregates(unsigned int k, const AggregateInformation& aggregates);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ResourceReport& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ResourceReport& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_RESOURCEREPORT_M_H

